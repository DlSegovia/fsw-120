App top

addToInput = val => {
    this.setState({ input: this.state.input + val })
  }

  addDecimal = val => {
    if (this.state.input.indexOf('.') === -1) {
      this.setState({ input: this.state.input + val })
    }
  }

  addZeroToInput = val => {
    if (this.state.input !== "") {
      this.setState({ input: this.state.input + val })
    }
  }

  clearInput = () => {
    this.setState({ input: '' })
  }

  add = () => {
    this.setState.previousNumber = this.state.input
    this.setState({ input: "" })
    this.setState.operator = "plus"
  }

  subtract = () => {
    this.setState.previousNumber = this.state.input
    this.setState({ input: "" })
    this.setState.operator = "subtract"
  }

  multiply = () => {
    this.setState.previousNumber = this.state.input
    this.setState({ input: "" })
    this.setState.operator = "multiply"
  }

  divide = () => {
    this.setState.previousNumber = this.state.input
    this.setState({ input: "" })
    this.setState.operator = "divide"
  }

  evaluate = () => {
    this.setState.currentNumber = this.state.input
  console.log(this.state.operator)

middle

if (this.state.operator === "plus") {
      this.setState({
        output: parseInt(this.state.previousNumber) +
          parseInt(this.state.currentNumber)
      })
    } else if (this.state.operator === "subtract") {
      this.setState({
        input: parseInt(this.state.previousNumber) -
          parseInt(this.state.currentNumber)
      })
    } else if (this.state.operator === "multiply") {
      this.setState({
        input: parseInt(this.state.previousNumber) *
          parseInt(this.state.currentNumber)
      })
    } else if (this.state.operator === "divide") {
      this.setState({
        input: parseInt(this.state.previousNumber) /
          parseInt(this.state.currentNumber)
      })
    }

    bottum

    render() {
    return (
      <div className="App">
        <div className='calc-wrapper'>
          <div className='row'>
            <Input>
              {this.state.input}
              {console.log (this.state.input)}
            </Input>
          </div>
          <div className='row'>
            <Button handleClick={this.addToInput}>7</Button>
            <Button handleClick={this.addToInput}>8</Button>
            <Button handleClick={this.addToInput}>9</Button>
            <Button handleClick={this.divide}>/</Button>
          </div>
          <div className='row'>
            <Button handleClick={this.addToInput}>4</Button>
            <Button handleClick={this.addToInput}>5</Button>
            <Button handleClick={this.addToInput}>6</Button>
            <Button handleClick={this.multiply}>*</Button>
          </div>
          <div className='row'>
            <Button handleClick={this.addToInput}>1</Button>
            <Button handleClick={this.addToInput}>2</Button>
            <Button handleClick={this.addToInput}>3</Button>
            <Button handleClick={this.add}>+</Button>
          </div>
          <div className='row'>
            <Button handleClick={this.addDecimal}>.</Button>
            <Button handleClick={this.addZeroToInput}>0</Button>
            <Button handleClick={this.evaluate}>=</Button>
            <Button handleClick={this.subtract}>-</Button>
          </div>
          <div id='output'> {this.state.output} </div>
          <div className='row'>
            <ClearButton handleClear={this.clearInput}
            >Clear</ClearButton>
          </div>
        </div>
      </div>
    )
  }

  Button

  import React, { Component } from 'react'
import './Button.css'

class Button extends Component {
  isOperator = val => {
    return !isNaN(val) || val === '.' || val === '='
  }
  render() {
    return (
        (this.props.children) ? "" : "operator"}`}
        onCl      <div className={`button ${this.isOperator
ick={() => this.props.handleClick
          (this.props.children)}>

        {this.props.children}
      </div>
    )
  }
}
export default Button

clear button

import React, { Component } from 'react'
import './ClearButton.css'

class ClearButton extends Component {
  render() {
    return (
      <div className='clear-btn'
      onClick={() => this.props.handleClear()}>
        {this.props.children}
      </div>
    )
  }
}
export default ClearButton

input

import React, { Component } from 'react'
import './Input.css'

class Input extends Component {
  render() {
    return (
      <div className='input'>
        {this.props.children}
      </div>
    )
  }
}
export default Input